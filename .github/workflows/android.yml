name: Build OpenCV-contrib for Android

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      OCV_VER: 4.6.0
      PACKAGE_NAME: opencv-4.6.0-android
      NDK_VER: 25.1.8937393
      
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt-hotspot'
          java-version: '17'

      - name: Install tools
        run: |
          sudo apt-get update 2>&1 > /dev/null
          sudo apt-get install -y build-essential ninja-build ccache 2>&1 > /dev/null
          echo "Done"

      - name: Prepare NDK dir for caching
        run: |
          sudo mkdir -p ${ANDROID_HOME}/ndk
          sudo chmod -R 777 ${ANDROID_HOME}/ndk
          sudo chown -R $USER:$USER ${ANDROID_HOME}/ndk

      - name: NDK Cache
        id: ndk-cache
        uses: actions/cache@v3
        with:
          path: ${ANDROID_HOME}/ndk
          key: ndk-cache-${NDK_VER}-v1

      - name: Install NDK
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;${NDK_VER}"


      - name: Tools report
        run: |
         type gcc ninja curl grep sed tr cmake git python3 2>&1 || true
         gcc --version
         ninja --version
         python3 --version
         cmake --version
         echo ANDROID_HOME is ${ANDROID_HOME}
         echo Building OpenCV version: ${OCV_VER}
         echo Expected package name: ${{ env.PACKAGE_NAME }}.zip

      - uses: actions/checkout@v3

      - name: Prepare Cache Key
        run: |
          pwd
          echo "https://github.com/opencv/opencv/archive/refs/tags/${OCV_VER}.tar.gz" >> cache_key.txt
          echo "https://github.com/opencv/opencv_contrib/archive/refs/tags/${OCV_VER}.tar.gz" >> cache_key.txt
          
      - name: Cache Downloads
        id: cache-downloads
        uses: actions/cache@v3
        with:
            path: |
              ./cache/
            key: ${{ hashFiles('cache_key.txt') }}

      - name: Download if Needed
        if: steps.cache-downloads.outputs.cache-hit != 'true'
        run: |
            mkdir -p ./cache
            curl -o ./cache/opencv-${OCV_VER}.tar.gz -L "https://github.com/opencv/opencv/archive/refs/tags/${OCV_VER}.tar.gz"
            curl -o ./cache/opencv_contrib-${OCV_VER}.tar.gz -L "https://github.com/opencv/opencv_contrib/archive/refs/tags/${OCV_VER}.tar.gz"

      - name: Extract OpenCV & OpenCV Contrib
        run: |
          tar xf ./cache/opencv-${OCV_VER}.tar.gz
          tar xf ./cache/opencv_contrib-${OCV_VER}.tar.gz
          ls -l

      - name: Build OpenCV / OpenCV-Contrib
        run: |
          python3 opencv-${OCV_VER}/platforms/android/build_sdk.py --help
          mkdir output
          pwd
          ls -l
          cp ndk-22-custom.config.py opencv-${OCV_VER}/platforms/android
          python3 opencv-${OCV_VER}/platforms/android/build_sdk.py \
                  --sdk_path ${ANDROID_HOME} \
                  --ndk_path ${ANDROID_HOME}/ndk/${NDK_VER} \
                  --use_android_buildtools \
                  --config ndk-22-custom.config.py \
                  --extra_modules_path $PWD/opencv_contrib-${OCV_VER}/modules \
                  --modules_list core,improc,aruco,calib3d,imgcodecs,java \
                  --no_samples_build \
                  --no_kotlin \
                  workdir $PWD/opencv-${OCV_VER}

      - name: Zip Output
        run: |
          zip -9 -r ${{ env.PACKAGE_NAME }}.zip workdir/OpenCV-android-sdk

#       - name: Prepare Common CMake Build Options
#         run: |
#           cat cmake_options.txt > build_options.txt
#           cat <<EOF>>build_options.txt
#           -DCMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk/${NDK_VER}/build/cmake/android.toolchain.cmake
#           -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-${OCV_VER}/modules
#           -DPYTHON_DEFAULT_EXECUTABLE=$(which python3)          
#           EOF
#           # ${{ runner.workspace }}/
#           echo "Final Common CMake Build Options:"
#           cat build_options.txt
#          
#       - name: Build OpenCV / OpenCV-Contrib arm64-v8a
#         run: |
#           mkdir -p arm64-v8a && cd arm64-v8a
#           cmake -GNinja -DANDROID_ABI=arm64-v8a -DANDROID_ARM_NEON=ON $(cat ../build_options.txt) -DCMAKE_INSTALL_PREFIX=output ../opencv-${OCV_VER}
#           cmake --build . -j
#           cmake --build . --target install
#
#       - name: Build OpenCV / OpenCV-Contrib armeabi-v7a
#         run: |
#           mkdir -p armeabi-v7a && cd armeabi-v7a
#           cmake -GNinja -DANDROID_ABI=armeabi-v7a -DANDROID_ARM_NEON=ON $(cat ../build_options.txt) -DCMAKE_INSTALL_PREFIX=output ../opencv-${OCV_VER}
#           cmake --build . -j
#           cmake --build . --target install
#
#       - name: Build OpenCV / OpenCV-Contrib x86
#         run: |
#           mkdir -p x86 && cd x86
#           cmake -GNinja -DANDROID_ABI=x86 $(cat ../build_options.txt) -DCMAKE_INSTALL_PREFIX=output ../opencv-${OCV_VER}
#           cmake --build . -j
#           cmake --build . --target install
#
#       - name: Build OpenCV / OpenCV-Contrib x86_64
#         run: |
#           mkdir -p x86_64 && cd x86_64
#           cmake -GNinja -DANDROID_ABI=x86_64 -DENABLE_LTO=ON -DWITH_OPENMP=ON $(cat ../build_options.txt) -DCMAKE_INSTALL_PREFIX=output ../opencv-${OCV_VER}
#           cmake --build . -j
#           cmake --build . --target install
#
#       - name: Zip Output
#         run: |
#           mkdir ${{ env.PACKAGE_NAME }}
#           #cp -rf x86/output/* ${{ env.PACKAGE_NAME }}/
#           #cp -rf x86_64/output/* ${{ env.PACKAGE_NAME }}/
#           cp -rf armeabi-v7a/output/* ${{ env.PACKAGE_NAME }}/
#           cp -rf arm64-v8a/output/* ${{ env.PACKAGE_NAME }}/
#           rm -rf ${{ env.PACKAGE_NAME }}/sdk/etc
#           rm -f ${{ env.PACKAGE_NAME }}/sdk/native/jni/*.mk
#           rm -f ${{ env.PACKAGE_NAME }}/sdk/native/jni/android.toolchain.cmake
#           zip -9 -r ${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          retention-days: 90
          if-no-files-found: error
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.zip
